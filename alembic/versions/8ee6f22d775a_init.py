"""init

Revision ID: 8ee6f22d775a
Revises:
Create Date: 2024-02-07 15:20:19.195482

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '8ee6f22d775a'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('rules',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name')
    )

    op.create_table('scans',
        sa.Column('scan_id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('version', sa.String(), nullable=False),
        sa.Column('status', sa.Enum('QUEUED', 'PENDING', 'FINISHED', 'FAILED', name='status'), nullable=False),
        sa.Column('score', sa.Integer(), nullable=True),
        sa.Column('inspector_url', sa.String(), nullable=True),
        sa.Column('queued_at', sa.DateTime(timezone=True), server_default=sa.FetchedValue(), nullable=True),
        sa.Column('queued_by', sa.String(), nullable=False),
        sa.Column('pending_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('pending_by', sa.String(), nullable=True),
        sa.Column('finished_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('finished_by', sa.String(), nullable=True),
        sa.Column('reported_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('reported_by', sa.String(), nullable=True),
        sa.Column('fail_reason', sa.String(), nullable=True),
        sa.Column('commit_hash', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('scan_id'),
        sa.UniqueConstraint('name', 'version')
    )

    op.create_index(op.f('ix_scans_finished_at'), 'scans', ['finished_at'], unique=False)
    op.create_index(op.f('ix_scans_status'), 'scans', ['status'], unique=False, postgresql_where=sa.text("status = 'QUEUED' OR status = 'PENDING'"))

    op.create_table('download_urls',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('scan_id', sa.UUID(), nullable=False),
        sa.Column('url', sa.String(), nullable=False),
        sa.ForeignKeyConstraint(['scan_id'], ['scans.scan_id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    op.create_index(op.f('ix_download_urls_scan_id'), 'download_urls', ['scan_id'], unique=False)

    op.create_table('package_rules',
        sa.Column('scan_id', sa.UUID(), nullable=False),
        sa.Column('rule_id', sa.UUID(), nullable=False),
        sa.ForeignKeyConstraint(['rule_id'], ['rules.id'], ),
        sa.ForeignKeyConstraint(['scan_id'], ['scans.scan_id'], ),
        sa.PrimaryKeyConstraint('scan_id', 'rule_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('package_rules')
    op.drop_index(op.f('ix_download_urls_scan_id'), table_name='download_urls')
    op.drop_table('download_urls')
    op.drop_index(op.f('ix_scans_status'), table_name='scans', postgresql_where=sa.text("status = 'QUEUED' OR status = 'PENDING'"))
    op.drop_index(op.f('ix_scans_finished_at'), table_name='scans')
    op.drop_table('scans')
    op.drop_table('rules')
    # ### end Alembic commands ###
